/*
 * OpenSslGeneratedRsaPlainCrtTestVectors.h
 *
 *  Created on: Aug 9, 2012
 *      Author: ozengin
 */

#ifndef OPENSSLGENERATEDRSAPLAINCRTTESTVECTORS_H_
#define OPENSSLGENERATEDRSAPLAINCRTTESTVECTORS_H_



#define PUBLIC_EXPONENT_LENGTH 			3

// RSA plain constants for 512B
#define DATA_LENGTH_HALFK 				64			// 512 bits
#define MODULUS_LENGTH_HALFK 			64 			// 512 bits
#define EXPONENT_LENGTH_HALFK 			64	 		// 512 bits
// RSA CRT  Constants for 512B
#define DP_LENGTH_HALFK					32			// 256 bits
#define DQ_LENGTH_HALFK					32			// 256 bits
#define P_LENGTH_HALFK					32			// 256 bits
#define PINV_LENGTH_HALFK				32			// 256 bits
#define Q_LENGTH_HALFK					32			// 256 bits
#define QINV_LENGTH_HALFK				32			// 256 bits


// RSA plain constants for 1K
#define DATA_LENGTH_1K 					128			// 1024 bits
#define MODULUS_LENGTH_1K 				128 		// 1024 bits
#define EXPONENT_LENGTH_1K 				128 		// 1024 bits
// RSA CRT  Constants for 1K
#define DP_LENGTH_1K					64			// 512 bits
#define DQ_LENGTH_1K					64			// 512 bits
#define P_LENGTH_1K						64			// 512 bits
#define PINV_LENGTH_1K					64			// 512 bits
#define Q_LENGTH_1K						64			// 512 bits
#define QINV_LENGTH_1K					64			// 512 bits


// RSA constants for 2K
#define DATA_LENGTH_2K 					256			// 2048 bits
#define MODULUS_LENGTH_2K 				256 		// 2048 bits
#define EXPONENT_LENGTH_2K 				256 		// 2048 bits
// RSA CRT  Constants for 2K
#define DP_LENGTH_2K					128			// 1024 bits
#define DQ_LENGTH_2K					128			// 1024 bits
#define P_LENGTH_2K						128			// 1024 bits
#define PINV_LENGTH_2K					128			// 1024 bits
#define Q_LENGTH_2K						128			// 1024 bits
#define QINV_LENGTH_2K					128			// 1024 bits


const uint8_t publicExponent[] = {0x01, 0x00, 0x01}; // A.K.A  e
// Any exponent to  one is one
const uint8_t oneMsgData [] = {0x01};

// ####################   public key 512B ################################
const uint8_t modulusHalfK[] = {
		0xb9, 0x5b, 0x41, 0xb8, 0x1c, 0x8d, 0x8b, 0xa5, 0xc1, 0xe4, 0xba, 0x2c, 0x82, 0x4b, 0x55, 0xd8,
		0x21, 0xdd, 0x9a, 0xad, 0xbe, 0x1b, 0x6b, 0x12, 0x10, 0x73, 0xf9, 0x92, 0x0a, 0x8d, 0x79, 0x44,
		0x7f, 0x00, 0x59, 0x74, 0x3a, 0xfc, 0x84, 0x3a, 0xb2, 0xa9, 0x52, 0xdb, 0x7c, 0x49, 0x47, 0x44,
		0xb5, 0x0f, 0x05, 0xfc, 0x49, 0xb0, 0xc3, 0xd9, 0x11, 0xef, 0x0e, 0x4c, 0xd6, 0x9a, 0x33, 0x5d
};
// ###################### private Key 512B ###############################
const uint8_t privateExponentHalf[] = { 	// A.K.A 	d
		0x0a, 0x67, 0x02, 0xb3, 0x30, 0x77, 0x09, 0x25, 0x4e, 0x52, 0x65, 0xd8, 0x65, 0x9f, 0x90, 0xbb,
		0xc6, 0x7a, 0xc7, 0x59, 0x84, 0xd7, 0xc9, 0x14, 0x84, 0x73, 0xdd, 0xc7, 0xc2, 0x6b, 0xda, 0x28,
		0x53, 0x6e, 0xe1, 0xee, 0x78, 0xea, 0x61, 0xdf, 0x82, 0xa6, 0x48, 0x78, 0x58, 0x5a, 0xd0, 0x7d,
		0x8c, 0x73, 0xbb, 0xdc, 0xbe, 0xed, 0xf4, 0xd9, 0xfc, 0xf5, 0xcb, 0xf3, 0xaa, 0x34, 0xcc, 0x89
};

const uint8_t pHalf[] = {			// A.K.A prime 1
		0xe8, 0xfa, 0x97, 0xba, 0xee, 0x3e, 0xe0, 0x59, 0x4c, 0xb6, 0x12, 0xe1, 0x98, 0x93, 0xf4, 0xad,
		0x0a, 0x9b, 0xbb, 0x9c, 0xe5, 0xb7, 0x85, 0xaf, 0x97, 0x8f, 0xb7, 0x4f, 0xf7, 0x68, 0x12, 0x33
};

const uint8_t qHalf[] = {			// A.K.A prime 2
		0xcb, 0xac, 0x03, 0x55, 0xb5, 0x5d, 0x41, 0x30, 0xd9, 0x3a, 0x2a, 0xc5, 0xe8, 0x7f, 0xf2, 0xa7,
		0x78, 0x3f, 0x34, 0x9f, 0x82, 0x69, 0x2e, 0x04, 0x99, 0xfc, 0xb7, 0xe9, 0xa6, 0x81, 0xb4, 0x2f
};

const uint8_t dpHalf[] = {		// A.K.A exponent 1
		0x71, 0xcb, 0x04, 0x15, 0x2f, 0x8c, 0xd2, 0x73, 0x8b, 0x7e, 0x5a, 0xd6, 0x89, 0x79, 0xaa, 0xc6,
		0x62, 0x2a, 0x12, 0x86, 0xdd, 0xc4, 0xb7, 0xad, 0x3e, 0x2f, 0xd9, 0xef, 0x5a, 0xfe, 0x1f, 0xf5
};

const uint8_t dqHalf[] = {		// A.K.A exponent 2
		0xa8, 0x82, 0xce, 0x53, 0x88, 0x75, 0xfa, 0xac, 0xfe, 0xdd, 0x98, 0x6c, 0x1c, 0x3c, 0x58, 0x38,
		0xe5, 0x4d, 0x6e, 0x2d, 0x97, 0x49, 0x8c, 0xb0, 0x73, 0xf3, 0x5a, 0xfa, 0xef, 0x2f, 0x9b, 0x33
};

const uint8_t qInvHalf[] = {		// A.K.A coefficient
		0x3a, 0xb1, 0xc9, 0xe3, 0xec, 0x46, 0x48, 0x98, 0x44, 0xd6, 0xef, 0x81, 0x89, 0x60, 0x72, 0xf8,
		0x29, 0x47, 0x71, 0xaf, 0xc8, 0xf0, 0xca, 0xba, 0x4e, 0xb8, 0xf2, 0xa8, 0x2e, 0x74, 0x8d, 0x18
};

// ######################################################################

// ######################### 512K Test Data ##############################################################
const uint8_t msgDataHalfK[] = {
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
};

const uint8_t criticalMessageDataHalfK [] = {
        0xFF, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
};

const uint8_t decryptedPriKeyMsgDataHalfK [] = {
		0xa2, 0xda, 0x40, 0x5b, 0x2e, 0xd4, 0xe6, 0x7b, 0x62, 0xce, 0x37, 0x1f, 0x98, 0x32, 0xaa, 0x51,
		0x78, 0x26, 0x0d, 0xf5, 0x6b, 0x6f, 0xff, 0x9d, 0xdd, 0x9f, 0x1d, 0xf4, 0x75, 0x02, 0x0d, 0xd3,
		0xb2, 0x36, 0xa0, 0x70, 0x7f, 0x7d, 0x08, 0xf2, 0x6c, 0x48, 0x32, 0x7d, 0xa4, 0xaf, 0xbc, 0x4b,
		0x4f, 0xdb, 0xbe, 0x55, 0x3b, 0x16, 0x98, 0xa7, 0x0d, 0xe2, 0x3d, 0x6f, 0x04, 0x37, 0xdd, 0x2d
};

const uint8_t encryptedPubKeyMsgDataHalfK [] = {
		0x18, 0x5a, 0x7f, 0xa8, 0x42, 0x95, 0x17, 0xaf, 0xc3, 0xfe, 0xcf, 0x1a, 0x57, 0x0e, 0x50, 0xf5,
		0x88, 0x0e, 0x46, 0x90, 0x1c, 0x98, 0xfc, 0xd5, 0x7c, 0x59, 0x6f, 0x89, 0x91, 0xd8, 0xcf, 0x7b,
		0xf1, 0x54, 0xe7, 0x1e, 0xc0, 0x7a, 0x50, 0x04, 0x2a, 0x20, 0xe5, 0x5b, 0x2e, 0xef, 0xff, 0xbf,
		0x6b, 0x21, 0xa4, 0x51, 0x48, 0x28, 0x8e, 0x33, 0xbc, 0x72, 0xbc, 0xd4, 0x0d, 0xbf, 0xb2, 0x83
};


// ####################   public key 1K ################################
// 16 X 8 modulus
const uint8_t modulus1[] = {
		0xce, 0xc9, 0xd0, 0x18, 0x11, 0x55, 0xdd, 0xf4, 0xca, 0x4a, 0x63, 0x2b, 0x2e, 0xb5, 0x06, 0x7d,
		0x89, 0xb0, 0x22, 0xc5, 0x18, 0xda, 0x2c, 0x43, 0x67, 0xaf, 0xb5, 0x98, 0x45, 0x74, 0x29, 0xea,
		0x34, 0xb2, 0xee, 0x6a, 0x1c, 0xa2, 0x70, 0xa9, 0x41, 0xee, 0x46, 0x0a, 0x9d, 0x3c, 0x67, 0x9f,
		0x9a, 0xb1, 0xe6, 0x34, 0xef, 0xcb, 0x8c, 0x40, 0x57, 0x6b, 0x4e, 0xab, 0x25, 0xd6, 0x8f, 0x55,
		0x56, 0xe6, 0x61, 0xf1, 0x91, 0x25, 0xba, 0xac, 0xa0, 0x70, 0x32, 0x58, 0x95, 0x97, 0xd0, 0x4b,
		0xec, 0x5a, 0xc8, 0xff, 0x51, 0x9a, 0x07, 0xdd, 0xc4, 0xa9, 0xa9, 0x2e, 0x72, 0x77, 0x82, 0x31,
		0xa1, 0xf5, 0x3e, 0x04, 0x7e, 0x52, 0xbc, 0xf3, 0x78, 0xe8, 0xb7, 0x20, 0x14, 0x80, 0x01, 0xaf,
		0x87, 0x09, 0x10, 0x73, 0x61, 0x74, 0xff, 0x3d, 0x05, 0xd3, 0x00, 0xf3, 0x6f, 0x28, 0x26, 0x4f};


// ######################################################################


// ###################### private Key 1K #################################
const uint8_t privateExponent1[] = { 	// A.K.A 	d
		0x19, 0xdd, 0x2a, 0x16, 0xe8, 0x8c, 0x29, 0xdf, 0xc5, 0x31, 0x7a, 0xa7, 0xdb, 0x06, 0xaf, 0x52,
		0x22, 0x57, 0x92, 0x71, 0xbe, 0x83, 0x03, 0x48, 0x46, 0xfe, 0xb6, 0x22, 0xde, 0x85, 0x01, 0xfd,
		0x16, 0x2c, 0x4f, 0x1f, 0x9c, 0x87, 0x40, 0xba, 0x1a, 0xd1, 0xf7, 0x96, 0xba, 0x45, 0xe4, 0xdc,
		0x14, 0x98, 0x2d, 0xa7, 0xef, 0x5a, 0x31, 0x27, 0x97, 0x07, 0x87, 0xe6, 0x66, 0x2c, 0x28, 0xef,
		0x14, 0xe3, 0xfa, 0x57, 0xe4, 0x94, 0x7e, 0x2a, 0x73, 0xea, 0xe7, 0xad, 0x36, 0xa5, 0x0b, 0x27,
		0x4a, 0xa7, 0x33, 0xaa, 0xc4, 0x64, 0x0a, 0xa6, 0x23, 0xf3, 0x7f, 0x02, 0x31, 0x33, 0x1a, 0x72,
		0x81, 0xaf, 0xca, 0x70, 0x2f, 0x24, 0x7a, 0xca, 0xd1, 0x0b, 0x47, 0xe3, 0xa0, 0x24, 0xfa, 0x9a,
		0xd9, 0x8a, 0xb0, 0x0c, 0xc6, 0x02, 0xd7, 0xdd, 0x75, 0x03, 0x08, 0xce, 0x61, 0xc4, 0x28, 0x69
};

const uint8_t p1[] = {			// A.K.A prime 1
		0xf7, 0x41, 0x25, 0x36, 0xa2, 0x9d, 0x44, 0xc1, 0xae, 0x4c, 0x0e, 0x0a, 0x51, 0x82, 0xea, 0x87,
		0xff, 0x13, 0xb2, 0x56, 0x60, 0xf5, 0xc6, 0xf8, 0x90, 0x8b, 0x2a, 0xac, 0x5b, 0xe7, 0x03, 0x8e,
		0xf4, 0x79, 0x38, 0xe6, 0xb8, 0x61, 0xc5, 0xd6, 0x8e, 0xc7, 0x4b, 0xc9, 0x71, 0x8c, 0x84, 0xab,
		0x4a, 0x1c, 0x8e, 0xd3, 0xa7, 0x7f, 0x2d, 0x8d, 0xc8, 0xf1, 0xcb, 0x7d, 0x41, 0xf4, 0xf6, 0x65
};

const uint8_t q1[] = {			// A.K.A prime 2
		0xd6, 0x1a, 0x40, 0x93, 0x5d, 0x54, 0x10, 0x23, 0x48, 0xab, 0xc2, 0x5c, 0x9f, 0x44, 0x97, 0xed,
		0x68, 0x57, 0xe9, 0x78, 0x3f, 0xc9, 0x6a, 0xc5, 0x34, 0x51, 0x5e, 0xe1, 0x85, 0xfc, 0xb8, 0x8c,
		0xbf, 0xd6, 0xc5, 0xef, 0xd8, 0x78, 0xc2, 0x6a, 0xc7, 0x46, 0x16, 0x24, 0xb2, 0x7c, 0x39, 0xa8,
		0x22, 0x24, 0x64, 0x28, 0xa4, 0x14, 0x4d, 0xe9, 0x6c, 0xc5, 0xcb, 0x33, 0x73, 0x0b, 0xf4, 0xa3
};

const uint8_t dp1[] = {		// A.K.A exponent 1
		0x10, 0x2c, 0x7b, 0xc1, 0xb2, 0x2b, 0x75, 0x76, 0xf1, 0xee, 0xd9, 0xb0, 0x45, 0x1a, 0xba, 0x3a,
		0xc1, 0x2d, 0xc9, 0xa9, 0xaa, 0xd8, 0x08, 0xf6, 0xf3, 0x85, 0x96, 0xfa, 0x05, 0x5c, 0xfc, 0x37,
		0x9a, 0xb8, 0x5f, 0x47, 0x80, 0x62, 0x2c, 0xed, 0xd7, 0x13, 0x24, 0x5a, 0xfe, 0x09, 0x82, 0x18,
		0x2e, 0x55, 0xe5, 0xe5, 0xe4, 0x7c, 0x06, 0x3f, 0xd3, 0x18, 0x36, 0x06, 0x70, 0x8d, 0x14, 0x9d
};

const uint8_t dq1[] = {		// A.K.A exponent 2
		0xc6, 0x9d, 0x3b, 0xe2, 0x78, 0xe5, 0x8e, 0xc2, 0xec, 0x9b, 0x49, 0x86, 0x9a, 0xc9, 0x0b, 0x17,
		0x55, 0x80, 0x98, 0x38, 0xd1, 0x13, 0x8c, 0x54, 0xbc, 0x9f, 0xef, 0xa0, 0xce, 0xa7, 0x0e, 0x9c,
		0xa3, 0x2a, 0x1e, 0x1c, 0xcd, 0x77, 0xd9, 0x03, 0x2d, 0x31, 0x3b, 0x41, 0x77, 0xc1, 0xfd, 0xca,
		0x97, 0x41, 0xa3, 0x18, 0x80, 0x7d, 0xc5, 0x79, 0x11, 0x4a, 0xbb, 0xa2, 0x52, 0xcb, 0x78, 0x79
};

const uint8_t qInv1[] = {		// A.K.A coefficient
		0x2e, 0x5a, 0x9a, 0x22, 0xb0, 0xdc, 0x59, 0x38, 0x45, 0x36, 0x84, 0xdf, 0x8a, 0x45, 0x1b, 0xc0,
		0x9c, 0x4f, 0x9d, 0x95, 0x6c, 0x0f, 0xf6, 0x15, 0xed, 0x82, 0x2f, 0x7d, 0x27, 0x38, 0x3a, 0x79,
		0x5d, 0x61, 0xa3, 0x03, 0x15, 0x1b, 0x50, 0xfe, 0x8a, 0xfa, 0xf1, 0x5a, 0x8f, 0x04, 0x0f, 0x36,
		0xc6, 0x2e, 0x1c, 0xab, 0x69, 0xb7, 0x6c, 0x69, 0x7a, 0x6b, 0x3f, 0x43, 0x6a, 0x27, 0xa4, 0x53
};
// ############################################################################################# 1K Key





// #########################1K Test Data ##############################################################
const uint8_t msgData1K[] = {
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30};


const uint8_t criticalMessageData1K [] = {
		0xe5, 0x54, 0x5b, 0x18, 0x41, 0x56, 0x1a, 0xbb, 0x19, 0xbb, 0x74, 0xfc, 0x49, 0x92, 0x3e, 0x0a,
		0x96, 0xe4, 0xeb, 0xc8, 0x02, 0xe9, 0x6c, 0x51, 0x8a, 0x25, 0x2e, 0x84, 0x65, 0xc4, 0xc0, 0x36,
		0xa8, 0x39, 0x3e, 0x17, 0xfd, 0xdf, 0x9a, 0xf0, 0x30, 0x69, 0x11, 0x87, 0x0f, 0xa1, 0xaf, 0xa0,
		0x00, 0xf1, 0x39, 0x6c, 0xfd, 0xc7, 0x00, 0x67, 0x66, 0xdc, 0xc9, 0x28, 0x77, 0xe6, 0x2a, 0xbe,
		0xec, 0xa1, 0x63, 0xc0, 0x99, 0x73, 0x6c, 0xf8, 0x01, 0x76, 0x1f, 0x3c, 0xd1, 0xd0, 0x2a, 0xf8,
		0x7b, 0xee, 0xba, 0x41, 0x6d, 0xb3, 0x72, 0x2a, 0x31, 0x83, 0xa0, 0x57, 0xaf, 0xcf, 0xa8, 0x6e,
		0x82, 0xf5, 0xf8, 0xed, 0xb8, 0x14, 0x69, 0x3f, 0xa1, 0xf3, 0xe6, 0xc2, 0x26, 0x0a, 0xdf, 0x69,
		0xfd, 0xc5, 0xa3, 0x97, 0xcb, 0x37, 0xfa, 0xf1, 0x43, 0xc8, 0x04, 0x1b, 0xa0, 0xe4, 0x3b, 0x38};

const uint8_t decryptedPriKeyMsgData1K [] = {
		0x55, 0xef, 0x4f, 0xce, 0xbf, 0x8a, 0x83, 0xa5, 0xb8, 0x19, 0xcd, 0x93, 0x5e, 0x54, 0x28, 0xef,
		0x3f, 0xee, 0x31, 0x4a, 0x17, 0xba, 0x9c, 0xef, 0xd1, 0x5c, 0x1a, 0xf9, 0xe2, 0xeb, 0xf3, 0x7a,
		0x55, 0xc1, 0x2c, 0xfb, 0x07, 0xf5, 0x14, 0x03, 0xdb, 0x90, 0x83, 0x47, 0x49, 0xf6, 0x6a, 0x7a,
		0x75, 0x9f, 0xca, 0xe7, 0x64, 0xa1, 0x63, 0x3e, 0x9b, 0x04, 0x48, 0xc3, 0x21, 0x78, 0x48, 0x80,
		0xdd, 0xf9, 0x87, 0x1c, 0xb9, 0x91, 0x20, 0x08, 0x9e, 0x9c, 0x35, 0xdc, 0x24, 0xe5, 0xb3, 0x99,
		0xa6, 0x08, 0xdb, 0x8a, 0x68, 0x69, 0x29, 0xdb, 0x82, 0x36, 0xfb, 0x8e, 0x26, 0xc0, 0x02, 0x33,
		0xd5, 0x8f, 0x84, 0xc7, 0x77, 0x43, 0x1f, 0x70, 0x8b, 0xa6, 0xf6, 0x8a, 0xad, 0x82, 0x77, 0xa6,
		0xd2, 0x6a, 0xef, 0x1a, 0x69, 0x04, 0x2c, 0xea, 0x6f, 0x15, 0xa9, 0x0e, 0x9e, 0xa5, 0x83, 0xf7
};

const uint8_t encryptedPubKeyMsgData1K [] = {
		0x01, 0x61, 0x8a, 0xeb, 0x4d, 0xd7, 0x11, 0x5d, 0x0f, 0x8d, 0x75, 0xf0, 0x32, 0xb6, 0x5a, 0xb8,
		0xa7, 0x3f, 0xa9, 0xbf, 0x2e, 0xe4, 0x6a, 0x7b, 0x74, 0x18, 0xa5, 0xf2, 0x8c, 0xc4, 0x54, 0x29,
		0x98, 0x19, 0xdd, 0x30, 0xf7, 0xef, 0x1f, 0x13, 0x0c, 0x3b, 0xd6, 0x04, 0xa9, 0xeb, 0xdf, 0xee,
		0xab, 0x20, 0xd5, 0xfa, 0x42, 0xe8, 0x7a, 0x97, 0x34, 0x8a, 0x10, 0xff, 0x53, 0x0f, 0x50, 0xf8,
		0x12, 0x48, 0x89, 0x93, 0xa5, 0x99, 0xcf, 0x9b, 0x7e, 0x26, 0xc4, 0x79, 0x00, 0xca, 0xe6, 0xa7,
		0x9d, 0x22, 0xc4, 0xcb, 0xf4, 0x3b, 0x17, 0x6c, 0xfc, 0xdf, 0xd7, 0x60, 0x5e, 0xc6, 0x95, 0xb4,
		0xbc, 0x2e, 0x1b, 0x33, 0x13, 0xaf, 0x2a, 0xa9, 0x26, 0x71, 0x7a, 0xeb, 0x5e, 0xe8, 0x85, 0xed,
		0x52, 0x39, 0x7b, 0xb2, 0x46, 0x17, 0x6f, 0x58, 0xc7, 0x36, 0xb2, 0xa9, 0xc4, 0x77, 0x05, 0xf0
};

// ####################   public key 2K ##################################
const uint8_t modulus2 [] = {
		0xbf, 0x0d, 0x34, 0xec, 0x37, 0xa6, 0xf7, 0x8c, 0xd0, 0x8a, 0x7d, 0xae, 0x5e, 0xe1, 0x28, 0xda,
		0x10, 0x76, 0x7c, 0xe8, 0xc3, 0x89, 0x10, 0xd8, 0x13, 0xfc, 0xf6, 0xa4, 0xfa, 0x20, 0x8e, 0xf9,
		0xe5, 0xcc, 0x73, 0x2c, 0x70, 0xa3, 0x07, 0xa0, 0xab, 0xeb, 0x4a, 0x12, 0x93, 0xe6, 0xd1, 0x07,
		0x52, 0x65, 0x76, 0xd5, 0xbd, 0x22, 0x3c, 0xe5, 0xeb, 0x5d, 0x1b, 0x15, 0x45, 0xd1, 0x84, 0x8d,
		0x24, 0xcd, 0x23, 0x10, 0x12, 0x95, 0x29, 0x18, 0xce, 0x8b, 0xf1, 0x3b, 0x46, 0x99, 0x17, 0x5a,
		0xd5, 0x86, 0xd8, 0xb1, 0xa0, 0x05, 0xdf, 0x58, 0x4d, 0xba, 0x10, 0x0c, 0x84, 0x3d, 0x38, 0x95,
		0xa1, 0x25, 0x0a, 0xb2, 0x27, 0x4e, 0x19, 0x8a, 0x54, 0xde, 0xca, 0x3c, 0xee, 0x72, 0xd1, 0x9e,
		0xd9, 0xb0, 0x46, 0xaf, 0xe3, 0xe4, 0x20, 0xd1, 0x90, 0xe1, 0x1d, 0x82, 0x16, 0x8a, 0x41, 0x41,
		0x8d, 0x11, 0x8b, 0x2c, 0x8c, 0x87, 0xca, 0xc0, 0x09, 0x6d, 0x87, 0x20, 0x88, 0xec, 0x0b, 0x0e,
		0xd4, 0x4a, 0xea, 0xf1, 0xcd, 0xa6, 0x74, 0xaa, 0xf5, 0x5d, 0x9d, 0xc1, 0x45, 0xfe, 0x69, 0x13,
		0xea, 0x5e, 0x6b, 0x43, 0xa5, 0xe3, 0x40, 0x82, 0x5b, 0x8e, 0xf1, 0x00, 0x2a, 0x6d, 0x7f, 0x43,
		0x82, 0x59, 0xd9, 0x94, 0x6c, 0x62, 0x24, 0xbb, 0x47, 0x94, 0xe0, 0x91, 0x56, 0xeb, 0xdc, 0x82,
		0xce, 0xee, 0x2b, 0x6c, 0xd6, 0x60, 0x2b, 0xd7, 0x66, 0xa2, 0x8f, 0x14, 0x73, 0xce, 0xae, 0xc5,
		0x2d, 0xc9, 0xad, 0x01, 0x6a, 0x24, 0xf0, 0xde, 0x9c, 0x90, 0xa5, 0x86, 0x45, 0x71, 0x75, 0xd0,
		0xa5, 0x78, 0x9a, 0x35, 0x84, 0xcd, 0x18, 0x3b, 0xbf, 0x47, 0x8e, 0x08, 0x8e, 0x7c, 0x4e, 0x34,
		0xfa, 0xc2, 0x81, 0x66, 0x5f, 0xc3, 0x66, 0x8d, 0x1f, 0xcb, 0xa2, 0xf8, 0x1c, 0x0e, 0x18, 0x15
};

// ###################### private Key 2K #################################

const uint8_t privateExponent2[] = { 	// A.K.A 	d

		0x27, 0x1d, 0xa3, 0x1a, 0x42, 0x02, 0xb3, 0x68, 0x67, 0x42, 0x13, 0x9d, 0x61, 0xdb, 0xa3, 0xab,
		0x91, 0xf7, 0x50, 0x77, 0xaf, 0xa1, 0x1e, 0x8b, 0xbe, 0xfb, 0xe9, 0xdb, 0xb9, 0x42, 0x75, 0x43,
		0x80, 0xe3, 0x2d, 0x29, 0x8a, 0x1e, 0x36, 0xef, 0x94, 0x83, 0x65, 0xf5, 0x0b, 0xc7, 0x14, 0x40,
		0xf5, 0x83, 0xc4, 0xa2, 0xda, 0x48, 0x6a, 0x43, 0x80, 0xbe, 0xdd, 0x4e, 0xab, 0xae, 0xcb, 0xfe,
		0xc1, 0xec, 0x26, 0x23, 0xa2, 0x4a, 0x5b, 0xd1, 0xb2, 0x68, 0x40, 0x89, 0xac, 0x58, 0xa7, 0xc9,
		0x77, 0x32, 0x56, 0xa7, 0x77, 0x65, 0xfc, 0x66, 0x6d, 0xf3, 0x8c, 0x59, 0xa3, 0xb1, 0x8d, 0x26,
		0x45, 0x89, 0xf9, 0xf8, 0xa3, 0xc7, 0x7f, 0xbf, 0x2c, 0xc5, 0x38, 0x8e, 0xe5, 0x1b, 0x29, 0x03,
		0xe6, 0xfa, 0x0a, 0x5e, 0xf4, 0xbf, 0xbe, 0x60, 0x69, 0xd3, 0x4d, 0x61, 0x57, 0x10, 0x13, 0x6f,
		0xe7, 0x8d, 0x66, 0xc9, 0x16, 0x1c, 0x05, 0x7a, 0x01, 0xfe, 0xb2, 0xab, 0xc0, 0x34, 0x69, 0xa0,
		0x62, 0xda, 0x6c, 0x2c, 0x83, 0x8a, 0xc8, 0x9e, 0x0f, 0xea, 0x26, 0x3a, 0x52, 0xad, 0x66, 0xb4,
		0x44, 0xc0, 0x91, 0x33, 0xa3, 0x7e, 0xd7, 0xf2, 0x4c, 0x33, 0x76, 0xd5, 0x34, 0x39, 0xee, 0x83,
		0x58, 0xde, 0x92, 0xf6, 0x3a, 0x40, 0xcc, 0x08, 0x16, 0x35, 0x1b, 0x33, 0x7f, 0xa1, 0xc8, 0xa5,
		0x0b, 0x24, 0x55, 0xc7, 0xd1, 0x54, 0x58, 0x3c, 0x23, 0xd1, 0x06, 0x6b, 0xb5, 0xa5, 0x8a, 0x99,
		0x1e, 0xbe, 0xf7, 0x3e, 0x2e, 0x12, 0xba, 0xbe, 0xf2, 0x7d, 0x6e, 0x44, 0x3f, 0x6c, 0xb4, 0x37,
		0x2b, 0xac, 0x4b, 0x6f, 0x85, 0x74, 0x9a, 0x8a, 0x79, 0x3d, 0x6f, 0x3f, 0xaf, 0x5f, 0x2a, 0x4a,
		0xd8, 0xc6, 0x72, 0x49, 0xe9, 0x92, 0x8e, 0x1e, 0x0d, 0xab, 0x29, 0x2e, 0x9b, 0xdc, 0x07, 0x81
};

const uint8_t p2[] = {			// A.K.A prime 1
		0xee, 0x23, 0x28, 0x1f, 0xb6, 0x82, 0x89, 0xc2, 0x1b, 0x6d, 0xc2, 0x64, 0x7f, 0x6d, 0x1f, 0x95,
		0x80, 0x99, 0xf6, 0x2e, 0x32, 0xb8, 0x77, 0xad, 0x39, 0x58, 0xbd, 0x7f, 0x7b, 0xfa, 0x35, 0xe0,
		0xca, 0x29, 0xb1, 0xba, 0x3f, 0x2e, 0x7c, 0xc1, 0xc3, 0x97, 0x91, 0x47, 0x8d, 0xac, 0x64, 0xcc,
		0x3d, 0x7d, 0x75, 0x94, 0x39, 0xee, 0x56, 0x92, 0xfa, 0xf8, 0xee, 0x2f, 0x19, 0xff, 0xc3, 0x44,
		0xbb, 0x18, 0xae, 0x52, 0x0f, 0xd9, 0x30, 0xd4, 0xcd, 0x87, 0x8e, 0xf5, 0x29, 0x40, 0xf9, 0xa7,
		0x64, 0x5b, 0xa4, 0x01, 0xfb, 0x84, 0x93, 0x67, 0xb3, 0xb0, 0xb2, 0x44, 0x1f, 0x5d, 0x80, 0xa0,
		0xec, 0xb6, 0xec, 0x2e, 0xfe, 0x48, 0xb8, 0xd8, 0xf3, 0xb5, 0x48, 0x64, 0xab, 0x82, 0x6c, 0x81,
		0x0c, 0x1f, 0xba, 0x91, 0xde, 0x10, 0x28, 0xc7, 0x49, 0x13, 0x0b, 0xdf, 0x5f, 0x19, 0x37, 0xa5
};

const uint8_t q2[] = {			// A.K.A prime 2
		0xcd, 0x61, 0xe2, 0x42, 0x33, 0x99, 0xa8, 0x35, 0x3a, 0xf3, 0x20, 0x26, 0xdc, 0xa8, 0x49, 0x36,
		0x50, 0x16, 0xc7, 0x87, 0x83, 0x21, 0xf4, 0xbb, 0xa2, 0x9a, 0x1b, 0xa8, 0xd5, 0xf7, 0x0c, 0x21,
		0xed, 0x53, 0x67, 0x88, 0x2a, 0xb6, 0x87, 0xd2, 0xad, 0x74, 0x21, 0x3e, 0x86, 0x90, 0x22, 0x08,
		0xed, 0xbf, 0x95, 0xb4, 0x78, 0x12, 0x13, 0xf8, 0x19, 0xfd, 0x42, 0x9e, 0x2a, 0xf6, 0xb3, 0x7f,
		0x8f, 0x66, 0x82, 0x2d, 0x38, 0xff, 0x4c, 0xcf, 0x9e, 0x4f, 0x93, 0xc7, 0x4c, 0x5c, 0x7a, 0xb8,
		0xf2, 0xd4, 0x4c, 0x49, 0x3d, 0xff, 0x04, 0xca, 0xcb, 0x7c, 0x75, 0x6b, 0xa1, 0xce, 0x22, 0xd3,
		0x4e, 0x4e, 0x89, 0x6f, 0x8e, 0x7d, 0x5a, 0x05, 0xf6, 0x31, 0xfd, 0xa7, 0x45, 0x54, 0x96, 0xc2,
		0xcb, 0x16, 0x1b, 0x6b, 0x3b, 0x71, 0x63, 0x14, 0x55, 0x4e, 0x1d, 0x2f, 0xeb, 0x09, 0xf3, 0xb1
};

const uint8_t dp2[] = {		// A.K.A exponent 1
		0xba, 0xee, 0xa4, 0x0f, 0x88, 0xe0, 0x1d, 0xad, 0x5e, 0x84, 0xa1, 0x64, 0xec, 0x56, 0x47, 0xc5,
		0xbe, 0xc6, 0x9c, 0xe6, 0x14, 0xf0, 0x93, 0x19, 0x4a, 0x7b, 0xeb, 0x7d, 0x08, 0x60, 0x18, 0x2d,
		0x15, 0xe4, 0xf6, 0xdb, 0xa1, 0xbf, 0x27, 0x35, 0x9f, 0x08, 0xfa, 0x84, 0xf5, 0xa4, 0x4f, 0x17,
		0xb8, 0x69, 0x24, 0x84, 0x2f, 0x99, 0x75, 0x22, 0x39, 0x9a, 0x70, 0xb6, 0x4e, 0xad, 0x63, 0xa6,
		0x2f, 0x4c, 0x27, 0x82, 0xc9, 0x68, 0x0f, 0x99, 0xec, 0xa0, 0xad, 0xca, 0xab, 0x10, 0x93, 0x29,
		0x20, 0x71, 0x83, 0x63, 0xff, 0x01, 0x4a, 0x08, 0xcc, 0x98, 0x36, 0xc7, 0x9c, 0xeb, 0x74, 0x0e,
		0x5e, 0xe3, 0x14, 0xb1, 0xaa, 0xf0, 0x81, 0x11, 0xe4, 0xf4, 0xf8, 0x17, 0xf6, 0x3e, 0x12, 0x58,
		0x96, 0xa0, 0xcd, 0x7e, 0xb5, 0x97, 0x6f, 0xbb, 0x48, 0x14, 0x88, 0x6c, 0x56, 0xa5, 0x5f, 0xf5
};

const uint8_t dq2[] = {		// A.K.A exponent 2
		0xb1, 0x6e, 0x80, 0xf3, 0xc4, 0x74, 0x58, 0xf7, 0x33, 0xa8, 0x5a, 0xfc, 0x77, 0xe1, 0x02, 0xee,
		0xe3, 0x1d, 0xea, 0xde, 0xcd, 0x91, 0x06, 0x47, 0x1b, 0xe0, 0x9b, 0x48, 0xaf, 0x20, 0xb0, 0xe0,
		0x96, 0x91, 0x59, 0x7e, 0x2f, 0xb8, 0x65, 0x7a, 0xc2, 0xd2, 0xf2, 0xed, 0x7b, 0x7f, 0x05, 0x88,
		0x45, 0x2d, 0x20, 0x7e, 0x3a, 0xc5, 0x13, 0x6f, 0x61, 0xb4, 0x84, 0x5a, 0xf4, 0xaf, 0x10, 0xbf,
		0x80, 0xf9, 0x84, 0x38, 0xe1, 0x66, 0xdd, 0xca, 0xf7, 0xef, 0xb3, 0xb1, 0x97, 0xec, 0xc5, 0x31,
		0x06, 0xc8, 0x15, 0xe7, 0xa8, 0xa1, 0xaa, 0x58, 0x30, 0x97, 0xa3, 0x31, 0x8b, 0x25, 0xf4, 0xbc,
		0x2c, 0x88, 0x78, 0xff, 0x61, 0x50, 0x35, 0xf7, 0xb4, 0x8b, 0xd7, 0xa1, 0x2c, 0xaa, 0x39, 0x5c,
		0xab, 0xea, 0xbb, 0x61, 0x56, 0x87, 0x4c, 0x9b, 0x82, 0x5e, 0xeb, 0xa4, 0x3c, 0x1f, 0xea, 0xe1
};

const uint8_t qInv2[] = {		// A.K.A coefficient
		0x68, 0x18, 0x42, 0x6c, 0x77, 0x46, 0x54, 0x71, 0x91, 0x77, 0xa4, 0x6f, 0x9f, 0xa7, 0xf8, 0xce,
		0x97, 0x71, 0x01, 0xd0, 0xde, 0x80, 0x5d, 0xb5, 0x5c, 0x4d, 0x2d, 0xf5, 0x7d, 0x56, 0x83, 0xf8,
		0x43, 0xa1, 0xea, 0x82, 0x09, 0xc1, 0xcf, 0xc0, 0x1e, 0x88, 0xd4, 0xe2, 0x07, 0xb6, 0x30, 0xf3,
		0x2f, 0x0b, 0x11, 0x9f, 0x3e, 0xb4, 0xaf, 0x6e, 0x8f, 0x73, 0xf6, 0xdc, 0x17, 0x63, 0x92, 0xa1,
		0xee, 0x35, 0x3a, 0xa2, 0xab, 0x43, 0x2d, 0x6e, 0xa6, 0x8f, 0x91, 0x5c, 0xb0, 0xad, 0x21, 0x48,
		0x4d, 0x14, 0x65, 0xec, 0xa3, 0xb8, 0xa0, 0x90, 0xc3, 0xdf, 0x02, 0x31, 0x13, 0x50, 0x89, 0x6e,
		0x40, 0xd9, 0x0f, 0x32, 0x7d, 0x2e, 0x3a, 0xa4, 0x49, 0xdc, 0x19, 0xfb, 0xf6, 0x5b, 0x78, 0xce,
		0xdf, 0x31, 0x8e, 0x3a, 0xdc, 0xe1, 0x10, 0x7b, 0x10, 0x77, 0xde, 0x2e, 0x89, 0xb9, 0x0c, 0x77
};

// #######################################################################

// #########################2K Test Data ##############################################################
const uint8_t msgData2K[] = {
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30};


const uint8_t criticalMessageData2K [] = {
		0xFF, 0x54, 0x5b, 0x18, 0x41, 0x56, 0x1a, 0xbb, 0x19, 0xbb, 0x74, 0xfc, 0x49, 0x92, 0x3e, 0x0a,
		0x96, 0xe4, 0xeb, 0xc8, 0x02, 0xe9, 0x6c, 0x51, 0x8a, 0x25, 0x2e, 0x84, 0x65, 0xc4, 0xc0, 0x36,
		0xa8, 0x39, 0x3e, 0x17, 0xfd, 0xdf, 0x9a, 0xf0, 0x30, 0x69, 0x11, 0x87, 0x0f, 0xa1, 0xaf, 0xa0,
		0x00, 0xf1, 0x39, 0x6c, 0xfd, 0xc7, 0x00, 0x67, 0x66, 0xdc, 0xc9, 0x28, 0x77, 0xe6, 0x2a, 0xbe,
		0xec, 0xa1, 0x63, 0xc0, 0x99, 0x73, 0x6c, 0xf8, 0x01, 0x76, 0x1f, 0x3c, 0xd1, 0xd0, 0x2a, 0xf8,
		0x7b, 0xee, 0xba, 0x41, 0x6d, 0xb3, 0x72, 0x2a, 0x31, 0x83, 0xa0, 0x57, 0xaf, 0xcf, 0xa8, 0x6e,
		0x82, 0xf5, 0xf8, 0xed, 0xb8, 0x14, 0x69, 0x3f, 0xa1, 0xf3, 0xe6, 0xc2, 0x26, 0x0a, 0xdf, 0x69,
		0xfd, 0xc5, 0xa3, 0x97, 0xcb, 0x37, 0xfa, 0xf1, 0x43, 0xc8, 0x04, 0x1b, 0xa0, 0xe4, 0x3b, 0x38,
		0xe5, 0x54, 0x5b, 0x18, 0x41, 0x56, 0x1a, 0xbb, 0x19, 0xbb, 0x74, 0xfc, 0x49, 0x92, 0x3e, 0x0a,
		0x96, 0xe4, 0xeb, 0xc8, 0x02, 0xe9, 0x6c, 0x51, 0x8a, 0x25, 0x2e, 0x84, 0x65, 0xc4, 0xc0, 0x36,
		0xa8, 0x39, 0x3e, 0x17, 0xfd, 0xdf, 0x9a, 0xf0, 0x30, 0x69, 0x11, 0x87, 0x0f, 0xa1, 0xaf, 0xa0,
		0x00, 0xf1, 0x39, 0x6c, 0xfd, 0xc7, 0x00, 0x67, 0x66, 0xdc, 0xc9, 0x28, 0x77, 0xe6, 0x2a, 0xbe,
		0xec, 0xa1, 0x63, 0xc0, 0x99, 0x73, 0x6c, 0xf8, 0x01, 0x76, 0x1f, 0x3c, 0xd1, 0xd0, 0x2a, 0xf8,
		0x7b, 0xee, 0xba, 0x41, 0x6d, 0xb3, 0x72, 0x2a, 0x31, 0x83, 0xa0, 0x57, 0xaf, 0xcf, 0xa8, 0x6e,
		0x82, 0xf5, 0xf8, 0xed, 0xb8, 0x14, 0x69, 0x3f, 0xa1, 0xf3, 0xe6, 0xc2, 0x26, 0x0a, 0xdf, 0x69,
		0xfd, 0xc5, 0xa3, 0x97, 0xcb, 0x37, 0xfa, 0xf1, 0x43, 0xc8, 0x04, 0x1b, 0xa0, 0xe4, 0x3b, 0x38};

const uint8_t decryptedPriKeyMsgData2K [] = {
		0x30, 0x80, 0x33, 0x01, 0x1a, 0x79, 0x27, 0x33, 0xa6, 0x3a, 0x54, 0x78, 0x50, 0xb2, 0xda, 0x94,
		0xec, 0xc0, 0x75, 0xf8, 0x08, 0xed, 0x50, 0x90, 0xa4, 0x06, 0xb0, 0x68, 0x36, 0x83, 0x85, 0x62,
		0xb4, 0x73, 0x70, 0x37, 0xa8, 0x6b, 0x24, 0x7e, 0x4c, 0x4a, 0x10, 0xd7, 0x8b, 0xa2, 0x49, 0x79,
		0xf5, 0x2d, 0xd4, 0xc2, 0x94, 0xf1, 0x37, 0x9c, 0xbd, 0xd7, 0x6c, 0x2a, 0x19, 0xbc, 0x21, 0x90,
		0x57, 0x75, 0x5b, 0xe0, 0xe4, 0x3e, 0x20, 0xb9, 0x1b, 0x65, 0x1b, 0x9a, 0x17, 0xd5, 0x82, 0x15,
		0x44, 0x5b, 0x9c, 0xfe, 0x77, 0xb1, 0xf6, 0x55, 0x9e, 0x95, 0x10, 0x47, 0xe0, 0xca, 0x17, 0xf9,
		0x39, 0x5d, 0xec, 0x6a, 0xb7, 0x8e, 0x08, 0x71, 0xa2, 0x25, 0x01, 0xdf, 0x2b, 0x89, 0x77, 0x23,
		0xb0, 0x00, 0x64, 0xca, 0x09, 0xbf, 0xda, 0xe3, 0x3b, 0xeb, 0x78, 0x5a, 0x6d, 0x9c, 0xa9, 0xfb,
		0x4d, 0x3b, 0x65, 0xc0, 0xc3, 0x78, 0x06, 0x9c, 0x55, 0xcd, 0xfd, 0x07, 0x2d, 0x2e, 0x68, 0xed,
		0x83, 0xac, 0x5e, 0x0c, 0x6a, 0x55, 0xd2, 0x71, 0x2e, 0x1f, 0x03, 0xa5, 0x0a, 0x11, 0xb9, 0xb3,
		0xf3, 0xce, 0xf2, 0x66, 0x13, 0x7e, 0x32, 0x36, 0x1c, 0xdc, 0x4d, 0x3b, 0x8f, 0xb7, 0xf0, 0x78,
		0x09, 0x87, 0xc6, 0x2f, 0xf8, 0xf1, 0x38, 0x2d, 0x35, 0xa0, 0x46, 0xb0, 0x97, 0x41, 0xed, 0xa1,
		0xc8, 0x4a, 0x84, 0x47, 0xf0, 0xc1, 0xcf, 0xb5, 0x44, 0x91, 0x8c, 0x8f, 0x78, 0x27, 0x13, 0x9f,
		0x93, 0x43, 0x7e, 0x0b, 0xbc, 0x17, 0xfb, 0x54, 0x72, 0xd0, 0xdc, 0xf5, 0x9b, 0x20, 0x56, 0xb6,
		0x59, 0x67, 0xdd, 0x1d, 0xcd, 0x53, 0x16, 0x4c, 0xf1, 0x99, 0xa9, 0xd7, 0x23, 0x8f, 0x4b, 0x8a,
		0x66, 0xb1, 0x98, 0x81, 0x09, 0x07, 0x3f, 0xd8, 0x26, 0x29, 0x28, 0xd6, 0x0d, 0xbe, 0x82, 0xc6
};

const uint8_t encryptedPubKeyMsgData2K [] = {
		0x7e, 0x2f, 0x36, 0x82, 0x60, 0x94, 0x46, 0x76, 0xbb, 0x61, 0xad, 0xef, 0x37, 0xc6, 0xaa, 0x14,
		0x33, 0x29, 0xf1, 0x53, 0x08, 0xf7, 0xb4, 0xb8, 0xbc, 0xaa, 0x99, 0xda, 0x1d, 0x20, 0x6b, 0x07,
		0x33, 0xac, 0x9e, 0xda, 0xdb, 0xe2, 0xca, 0x39, 0x44, 0x61, 0x5f, 0x4f, 0x94, 0x1c, 0xe2, 0x8a,
		0x9d, 0xfa, 0x12, 0x7a, 0x39, 0x2d, 0x11, 0xa5, 0xbe, 0xb2, 0xb1, 0x12, 0x75, 0xfb, 0xda, 0x86,
		0x7d, 0x12, 0xfd, 0x08, 0xbe, 0xe3, 0x72, 0x3b, 0x41, 0x77, 0x87, 0x62, 0xd7, 0x6e, 0x53, 0x55,
		0xe6, 0x6e, 0x52, 0x09, 0x50, 0xfc, 0x18, 0x79, 0x79, 0x74, 0x5f, 0x0f, 0xb7, 0xf7, 0x7a, 0xfe,
		0x28, 0xa3, 0x49, 0xfc, 0x39, 0x1b, 0x78, 0xd0, 0x52, 0x2c, 0x37, 0x3d, 0x00, 0xe0, 0x75, 0xec,
		0x4d, 0x6f, 0xd3, 0x92, 0x4d, 0x19, 0xd2, 0x32, 0x09, 0xe3, 0xab, 0x26, 0x5d, 0x5b, 0x4d, 0xe2,
		0xd0, 0xc4, 0x49, 0x51, 0xbc, 0xe5, 0x6d, 0x6a, 0xee, 0xa6, 0x2f, 0x85, 0xd8, 0xe5, 0xe2, 0x2b,
		0xfb, 0x56, 0xc4, 0xf3, 0xcc, 0x71, 0x10, 0xfd, 0x78, 0x33, 0x77, 0xda, 0x81, 0xb8, 0x30, 0xc6,
		0x96, 0x90, 0x44, 0x9c, 0x4e, 0xab, 0xbb, 0xe6, 0xae, 0xa2, 0xc8, 0xd8, 0x6e, 0x43, 0xb8, 0x20,
		0x37, 0x04, 0xe2, 0x44, 0x79, 0x02, 0x69, 0x05, 0x31, 0xb1, 0xdc, 0x5a, 0x71, 0xfe, 0xb8, 0x00,
		0x08, 0x86, 0xf5, 0x6f, 0x2a, 0x3a, 0x0f, 0x56, 0xb4, 0xb2, 0xf2, 0x89, 0xe7, 0xdd, 0xef, 0xbd,
		0x24, 0x4e, 0x24, 0x55, 0x6f, 0x81, 0x9f, 0x92, 0xdc, 0xbb, 0xa2, 0x36, 0x7e, 0xfb, 0x60, 0xaa,
		0x64, 0xca, 0xca, 0x3b, 0x68, 0xd4, 0x9d, 0x00, 0x9f, 0x32, 0x1e, 0x3d, 0x6c, 0xed, 0x1e, 0xa3,
		0x77, 0x95, 0x1c, 0x67, 0xd4, 0x8f, 0x9b, 0x6a, 0xb2, 0x22, 0xae, 0xd7, 0xa7, 0x29, 0xc5, 0xf1
};

#endif /* OPENSSLGENERATEDRSAPLAINCRTTESTVECTORS_H_ */
